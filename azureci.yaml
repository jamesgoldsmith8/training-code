name: $(date:yyyyMMdd)$(rev:.rr)

trigger:
    - master

stages:
  - stage: compile
    jobs:
      - job: aspnet_build
        pool:
          vmImage: ubuntu-18.04
          steps:
            - script: |
                dotnet build 3_devops/Devops.sln 
  - stage: test
    jobs:
      - job: aspnet_test
        pool:
          vmImage: ubuntu-18.04
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: 'test'
              projects: '3_devops/Devops.sln'
              arguments: '--collect:"XPlat Code Coverage"'
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: cobertura
              summaryFileLocation: '**/coverage.cobertura.xml'
  - stage: analyze
    jobs:
      - job:
        pool:
          vmImage: ubuntu-18.04
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '3.1.100'
          - script: dotnet tool install --global dotnet-sonarscanner
          - script: |
              dotnet sonarscanner begin /k:devops-james /d:sonar.login=$SONAR_TOKEN /o:jamesgoldsmith8
              dotnet build 3_devops/Devops.sln
              dotnet test 3_devops/Devops.sln
              dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
            env:
              SONAR_TOKEN: $(SONAR_LOGIN)
  - stage: pack
    jobs:
      - job:
        pool:
          vmImage: ubuntu-18.04
        steps:
          - script: docker image build -f 3_devops/dockerfile -t jamesgoldsmith/devops:$BUILD_NAME
            env:
              BUILD_NAME: $(Build.DefinitionName)
          - script: docker login --username $DOCKER_USER --password $DOCKER_TOKEN
            env:
              DOCKER_TOKEN: $(docker.token)
              DOCKER_USER: $(docker.user)
          - script: docker image push jamesgoldsmith/devops:$BUILD_NAME
            env:
              BUILD_NAME: $(Build.DefinitionName)